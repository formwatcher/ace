// Generated by CoffeeScript 1.4.0
(function() {
  var Formwatcher, o,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  o = require("jquery");

  Formwatcher = require("formwatcher");

  Formwatcher.registerDecorator((function(_super) {

    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.name = "Ace";

    _Class.prototype.description = "Turns a textarea into the ace editor.";

    _Class.prototype.nodeNames = ["TEXTAREA"];

    _Class.prototype.classNames = ["ace"];

    _Class.prototype.defaultOptions = {
      theme: null,
      mode: null,
      tabSize: 2,
      softTabs: true
    };

    _Class.prototype.decorate = function(input) {
      var $aceContainerElement, $aceElement, $input, aceElement, className, editor, elements, mode, modeMatch, theme, themeMatch, _i, _j, _len, _len1, _ref, _ref1;
      elements = {
        input: input
      };
      $input = o(input);
      $input.hide();
      $aceContainerElement = o("<div class=\"formwatcher-ace-container\"></div>");
      $aceElement = o("<div class=\"formwatcher-ace-editor\"></div>");
      $aceElement.text($input.val());
      $aceContainerElement.append($aceElement);
      $aceContainerElement.insertAfter($input);
      aceElement = $aceElement.get(0);
      elements.ace = aceElement;
      editor = window.ace.edit(aceElement);
      editor.getSession().setTabSize(this.options.tabSize);
      editor.getSession().setUseSoftTabs(this.options.softTabs);
      mode = this.options.mode;
      _ref = $input.attr("class").split(/\s/);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        className = _ref[_i];
        if (modeMatch = /^ace\-mode\-(.+)/.exec(className)) {
          mode = modeMatch[1];
        }
      }
      theme = this.options.theme;
      _ref1 = $input.attr("class").split(/\s/);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        className = _ref1[_j];
        if (themeMatch = /^ace\-theme\-(.+)/.exec(className)) {
          theme = themeMatch[1];
        }
      }
      if (theme != null) {
        editor.setTheme("ace/theme/" + theme);
      }
      if (mode != null) {
        editor.getSession().setMode("ace/mode/" + mode);
      }
      editor.getSession().on("change", function(e) {
        return $input.val(editor.getValue());
      });
      return elements;
    };

    return _Class;

  })(Formwatcher.Decorator));

}).call(this);
